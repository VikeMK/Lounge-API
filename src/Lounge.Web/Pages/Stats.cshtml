@page
@using Lounge.Web.Settings
@using Microsoft.AspNetCore.Mvc.Localization
@inject ILoungeSettingsService LoungeSettingsService
@inject IViewLocalizer Localizer

@model Lounge.Web.Pages.StatsPageModel
@{
    ViewData["Title"] = $"{Localizer.GetString("Stats")} - {Localizer.GetString("Season")} {Model.Season}";
    Layout = "_Layout";
}

<div class="navbar navbar-expand-sm navbar-dark bg-dark rounded py-0" style="margin-bottom: 14px;">
    <div class="container-fluid">
        <span class="navbar-brand">@Localizer["Seasons"]</span>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#seasonSelector">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse justify-content-md-center" id="seasonSelector">
            <ul class="navbar-nav">
                @foreach (var season in LoungeSettingsService.ValidSeasons)
                {
                    <li class="nav-item">
                        <a class="nav-link @(season == Model.Season ? "active" : "")" asp-page="Stats" asp-route-season="@season">@Localizer["Season"] @season</a>
                    </li>
                }
            </ul>
        </div>
    </div>
</div>

<input type="hidden" value="@Model.Season" id="seasonInput"/>

<h1 class="m-4 text-center">Division Data</h1>

<canvas id="statDivisionChartBody"></canvas>

<div class="row m-2">
    <div class="table-responsive table-sm col-lg-6 col-md-6 col-sm-12 col-xs-12" style="font-size: 12px; display: inline-block">
        <table id="stats-table" class="table table-striped table-dark text-center">
            <thead>
                <tr>
                    <th>@Localizer["Division"]</th>
                    <th>@Localizer["Players"]</th>
                    <th>@Localizer["% of Players"]</th>
                    <th>@Localizer["Percentiles"]</th>
                </tr>
            </thead>
        </table>
    </div>

    <dl class="row col text-center" style="overflow: hidden;">
        <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
            <dt>@Localizer["Total Players"]</dt>
            <dd id="total-players"></dd>
        </div>
        <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
            <dt>@Localizer["Total Mogis"]</dt>
            <dd id="total-mogis"></dd>
        </div>
        <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
            <dt>@Localizer["Average MMR"]</dt>
            <dd id="average-mmr"></dd>
        </div>
        <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
            <dt>@Localizer["Median MMR"]</dt>
            <dd id="median-mmr"></dd>
        </div>
    </dl>  
</div>  

<h1 class="m-4 text-center">Country Data</h1>

<div class="row m-2">
    <canvas id="statPopulationCountryChartBody" class="col-lg-6 col-md-6 col-sm-12 col-xs-12"></canvas>
    <div class="table-responsive table-sm my-auto col-lg-6 col-md-6 col-sm-12 col-xs-12" >
        <table id="country-population-table" class="table table-striped table-dark text-center">
            <thead>
                <tr>
                    <th>@Localizer["Country"]</th>
                    <th>@Localizer["Population"]</th>
                    <th>@Localizer["% of Total Population"]</th>
                </tr>
            </thead>
        </table>
    </div>
</div>

<canvas class="m-2" id="statOverallCountryChartBody"></canvas>

<canvas class="m-2" id="statTopCountryChartBody"></canvas>

<h1 class="m-4 text-center">Activity Data</h1>

<div class="row m-2">
    <canvas id="statMogiFormatChartBody" class="col-lg-6 col-md-6 col-sm-6 col-xs-6"></canvas>
    <div class="table-responsive my-auto col-lg-6 col-md-6 col-sm-6 col-xs-6" >
        <table id="mogi-format-table" class="table table-striped table-dark text-center">
            <thead>
                <tr>
                    <th>@Localizer["Format"]</th>
                    <th>@Localizer["Mogis"]</th>
                    <th>@Localizer["% of Mogis"]</th>
                </tr>
            </thead>
        </table>
    </div>
</div>

<canvas class="m-2" id="statMogiActivityChartBody"></canvas>

<div class="row m-2">
    <div class="table-responsive table-sm my-auto col-lg-6 col-md-6 col-sm-6 col-xs-12" >
        <table id="mogi-tier-table" class="table table-striped table-dark text-center">
            <thead>
                <tr>
                    <th>@Localizer["Tier"]</th>
                    <th>@Localizer["Mogis"]</th>
                    <th>@Localizer["% of Mogis"]</th>
                </tr>
            </thead>
        </table>
    </div>
    <div class="table-responsive table-sm my-auto col-lg-6 col-md-6 col-sm-6 col-xs-12" >
        <table id="mogi-weekday-table" class="table table-striped table-dark text-center">
            <thead>
                <tr>
                    <th>@Localizer["Day of Week"]</th>
                    <th>@Localizer["Mogis"]</th>
                    <th>@Localizer["% of Mogis"]</th>
                </tr>
            </thead>
        </table>
    </div>
</div>

@section Scripts
    {
            <script src="~/lib/jquery/jquery.min.js"></script>
            <script src="~/lib/chartjs/chart.min.js"></script>
            <script src="~/js/stats.js"></script>
            <script>
                const countryNames = @Json.Serialize(LoungeSettingsService.CountryNames)
                const season = document.getElementById("seasonInput").value;
                const currSeasonInfo = chartSeasonConfig.Seasons[season]
                const colors = chartSeasonConfig.Colors

                function appendCell(content, withClass) {
                    const newCell = document.createElement("td");
                    if (withClass) newCell.classList.add(withClass);
                    newCell.appendChild(content);
                    tr.appendChild(newCell);
                }

                function updateMogiTables(data) {
                    const tierSortOrder = currSeasonInfo.RecordsTierOrder
                    tierSortOrder.unshift("SQ")
                    const mogiTierData = Object.entries(data.activityData.tierActivity).sort((a, b) => tierSortOrder.indexOf(b[0]) - tierSortOrder.indexOf(a[0]))

                    const tierTableBody = document.getElementById('mogi-tier-table')
                    for (const index in mogiTierData) {
                        const tier = mogiTierData[index]
                        const tr = document.createElement("tr");
                        
                        tr.style.color = tier[0] === "SQ" ? "#FFFFFF" : colors[currSeasonInfo.DivisionsToTier[tier[0]][0].split(" ")[0]]

                        // Tier Column
                        const tierCell = document.createElement("th");
                        tierCell.scope = "row";
                        tierCell.innerHTML = tier[0]
                        tr.appendChild(tierCell);

                        // Mogis Column
                        const mogisCell = document.createElement("th");
                        mogisCell.scope = "row";
                        mogisCell.innerHTML = tier[1]
                        tr.appendChild(mogisCell);

                        // % of Mogis Column
                        const mogiPercentCell = document.createElement("th");
                        mogiPercentCell.scope = "row";
                        mogiPercentCell.innerHTML = `${Math.round((tier[1] / data.totalMogis) * 10000) / 100}%`
                        tr.appendChild(mogiPercentCell)

                        tierTableBody.appendChild(tr);
                    }

                    const weekdayTableColors = ["#a3022c", "#9370db", "#d51c5e","#286cd3","#f1c232","#cccccc","#b45f06"]
                    const weekdayTableSortOrder = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
                    const mogiWeekdayData = Object.entries(data.activityData.dayOfWeekActivity).sort((a, b) => weekdayTableSortOrder.indexOf(a[0]) - weekdayTableSortOrder.indexOf(b[0]))

                    const weekdayTableBody = document.getElementById('mogi-weekday-table')
                    for (const index in mogiWeekdayData) {
                        const day = mogiWeekdayData[index]
                        const tr = document.createElement("tr");
                        tr.style.color = weekdayTableColors[index]

                        // Day of Week Column
                        const dayOfWeekCell = document.createElement("th");
                        dayOfWeekCell.scope = "row";
                        dayOfWeekCell.innerHTML = day[0]
                        tr.appendChild(dayOfWeekCell);

                        // Mogis Column
                        const mogisCell = document.createElement("th");
                        mogisCell.scope = "row";
                        mogisCell.innerHTML = day[1]
                        tr.appendChild(mogisCell);

                        // % of Mogis Column
                        const mogiPercentCell = document.createElement("th");
                        mogiPercentCell.scope = "row";
                        mogiPercentCell.innerHTML = `${Math.round((day[1] / data.totalMogis) * 10000) / 100}%`
                        tr.appendChild(mogiPercentCell)

                        weekdayTableBody.appendChild(tr);
                    }
                }

                function updateMogiActivityChart(data) {
                    const mogiActivity = Object.entries(data.activityData.dailyActivity).sort((a,b) => new Date(a[0]) - new Date(b[0]))

                     const title = (tooltipItems) => {
                        const index = tooltipItems[0].dataIndex
                        const date = mogiActivity[index]

                        return `Total - ${date[1].Total}`
                    };

                    const footer = (tooltipItems) => {
                        const index = tooltipItems[0].dataIndex
                        const date = mogiActivity[index]

                        const mogiPercentage = Math.round(10000 * parseInt(tooltipItems[0].formattedValue) / date[1].Total) / 100
                        
                        return `${mogiPercentage}% of Mogis`
                    };

                    const chart = new Chart(document.getElementById("statMogiActivityChartBody"), {
                        type: "bar",
                        data: {
                            labels: mogiActivity.map((row) => row[0]),
                            datasets: currSeasonInfo.RecordsTierOrder.reverse().map((tier) => {
                                return {
                                    label: tier,
                                    data: mogiActivity.map((date) => date[1][tier]),
                                    backgroundColor: colors[currSeasonInfo.DivisionsToTier[tier][0].split(" ")[0]]
                                }
                            }),
                        },
                        options: {
                            plugins: {
                                title: {
                                    display: true,
                                    font: {
                                        size: 16
                                    },
                                    padding: 20,
                                    text: "Mogis Per Day"
                                },
                                tooltip: {
                                    callbacks: {
                                        title,
                                        footer,
                                    }
                                },
                                legend: {
                                    display: false
                                }
                            },
                            scales: {
                                x: {
                                    stacked: true,
                                },
                                y: {
                                    stacked: true
                                }
                            }
                        }
                    });
                }

                function updateMogiFormatChart(data) {
                    const formatOrder = ["FFA", "2v2", "3v3", "4v4", "6v6"]
                    const mogiColors = ["#d51c5e","#286cd3","#f1c232","#cccccc","#b45f06"]
                    const mogiFormatData = Object.entries(data.activityData.formatData).sort((a, b) => formatOrder.indexOf(a[0]) - formatOrder.indexOf(b[0]))
                    const noSQMogiTotal = mogiFormatData.reduce((a,b) => a + b[1], 0)

                    const chart = new Chart(document.getElementById("statMogiFormatChartBody"), {
                        type: "pie",
                        data: {
                            labels: mogiFormatData.map((row) => row[0]),
                            datasets: [
                                {
                                    data: mogiFormatData.map((row) => row[1]),
                                    backgroundColor: mogiFormatData.map((row, index) => mogiColors[index])
                                },
                            ],
                        },
                        options: {
                            responsive: true,
                            aspectRatio: 2,
                            plugins: {
                                title: {
                                    display: true,
                                    font: {
                                        size: 16
                                    },
                                    padding: 20,
                                    text: "Number of Mogis per Format (No SQ)"
                                },
                                tooltip: {
                                    enabled: false
                                },
                                legend: {
                                    position: 'bottom',
                                    title: { 
                                        display: true,
                                        padding: 4 
                                    },
                                    labels: {
                                        font: {
                                            size: 16
                                        },
                                    }
                                },
                            }
                        }
                    });

                    const mogiTableBody = document.getElementById('mogi-format-table')
                    for (const index in mogiFormatData) {
                        const format = mogiFormatData[index]
                        const tr = document.createElement("tr");
                        tr.style.color = mogiColors[index]

                        // Format Column
                        const formatCell = document.createElement("th");
                        formatCell.scope = "row";
                        formatCell.innerHTML = format[0]
                        tr.appendChild(formatCell);

                        // Mogis Column
                        const mogisCell = document.createElement("th");
                        mogisCell.scope = "row";
                        mogisCell.innerHTML = format[1]
                        tr.appendChild(mogisCell);

                        // % of Mogis Column
                        const mogiPercentCell = document.createElement("th");
                        mogiPercentCell.scope = "row";
                        mogiPercentCell.innerHTML = `${Math.round((format[1] / noSQMogiTotal) * 10000) / 100}%`
                        tr.appendChild(mogiPercentCell)

                        mogiTableBody.appendChild(tr);
                    }
                }

                function updateTopCountryChart(data) {
                    const filtered = Object.entries(data.countryData).filter(a => a[1].playerTotal >= 6)
                    const sorted = filtered.sort((a,b) => b[1].topSixMmr - a[1].topSixMmr)

                    const title = (tooltipItems) => {
                        const index = tooltipItems[0].dataIndex
                        const country = sorted[index]

                        return `${countryNames[country[0]]} - #${index + 1}`
                    };

                    const footer = (tooltipItems) => {
                        const index = tooltipItems[0].dataIndex
                        const country = sorted[index]

                        return country[1].topSixPlayers.map(x => `${x.name} - ${x.mmr}`)
                    };

                    const chart = new Chart(document.getElementById("statTopCountryChartBody"), {
                        type: "bar",
                        data: {
                            labels: sorted.map((row) => row[0]),
                            datasets: [
                                {
                                    data: sorted.map((row) => Math.round((row[1].topSixMmr) * 100) / 100),
                                    backgroundColor: sorted.map((row) => colors[getDivisionName(row[1].topSixMmr, season)])
                                },
                            ],
                        },
                        options: {
                            plugins: {
                                title: {
                                    display: true,
                                    font: {
                                        size: 16
                                    },
                                    padding: 20,
                                    text: "Top Six Players Average MMR (min. 6)"
                                },
                                tooltip: {
                                    callbacks: {
                                        title,
                                        footer,
                                    }
                                },
                                legend: {
                                    display: false
                                }
                            }
                        }
                    });
                }

                function updateOverallCountryChart(data) {
                    const filtered = Object.entries(data.countryData).filter(a => a[1].playerTotal >= 10)
                    const sorted = filtered.sort((a,b) => b[1].totalAverageMmr - a[1].totalAverageMmr)

                    const title = (tooltipItems) => {
                        const index = tooltipItems[0].dataIndex
                        const country = sorted[index]

                        return `${countryNames[country[0]]} - #${index + 1}`
                    };

                    const footer = (tooltipItems) => {
                        const index = tooltipItems[0].dataIndex
                        const country = sorted[index]

                        return 'Player Total: ' + country[1].playerTotal
                    };

                    const chart = new Chart(document.getElementById("statOverallCountryChartBody"), {
                        type: "bar",
                        data: {
                            labels: sorted.map((row) => row[0]),
                            datasets: [
                                {
                                    data: sorted.map((row) => Math.round((row[1].totalAverageMmr) * 100) / 100),
                                    backgroundColor: sorted.map((row) => colors[getDivisionName(row[1].totalAverageMmr, season)])
                                },
                            ],
                        },
                        options: {
                            plugins: {
                                title: {
                                    display: true,
                                    font: {
                                        size: 16
                                    },
                                    padding: 20,
                                    text: "Average Country MMR (min. 10)"
                                },
                                tooltip: {
                                    callbacks: {
                                        title: title,
                                        footer: footer,
                                    }
                                },
                                legend: {
                                    display: false
                                }
                            }
                        }
                    });
                }

                function updatePopulationCountryChart(data) {
                    const populationCountryColors = Object.values(colors) 

                    const populationCountryData = Object.entries(data.countryData).sort((a, b) => b[1].playerTotal - a[1].playerTotal)

                    if (populationCountryData.length >= 10) {
                        const topCountriesTotal = populationCountryData.slice(0, 9).reduce((a, b) => a + b[1].playerTotal, 0)
                        populationCountryData.length = 9
                        populationCountryData.push(["Other", {
                            playerTotal: data.totalPlayers - topCountriesTotal
                        }])
                    }

                    const chart = new Chart(document.getElementById("statPopulationCountryChartBody"), {
                        type: "pie",
                        data: {
                            labels: populationCountryData.map((row) => row[0]),
                            datasets: [
                                {
                                    data: populationCountryData.map((row) => row[1].playerTotal),
                                    backgroundColor: populationCountryData.map((row, index) => populationCountryColors[index])
                                },
                            ],
                        },
                        options: {
                            responsive: true,
                            aspectRatio: 2,
                            plugins: {
                                title: {
                                    display: true,
                                    font: {
                                        size: 16
                                    },
                                    padding: 20,
                                    text: "Country Population"
                                },
                                tooltip: {
                                    enabled: false
                                },
                                legend: {
                                    position: 'bottom',
                                    title: { 
                                        display: true,
                                        padding: 4 
                                    },
                                    labels: {
                                        font: {
                                            size: 14
                                        },
                                    }
                                },
                            }
                        }
                    });

                    const countryPopulationTableBody = document.getElementById('country-population-table')
                    for (const index in populationCountryData) {
                        const country = populationCountryData[index]
                        const tr = document.createElement("tr");
                        tr.style.color = populationCountryColors[index]

                        // Country Column
                        const countryCell = document.createElement("th");
                        countryCell.scope = "row";
                        countryCell.innerHTML = country[0] !== "Other" ? countryNames[country[0]] : "Other"
                        tr.appendChild(countryCell);

                        // Population Column
                        const populationCell = document.createElement("th");
                        populationCell.scope = "row";
                        populationCell.innerHTML = country[1].playerTotal
                        tr.appendChild(populationCell);

                        // % of Total Population Column
                        const populationPercentCell = document.createElement("th");
                        populationPercentCell.scope = "row";
                        populationPercentCell.innerHTML = `${Math.round((country[1].playerTotal / data.totalPlayers) * 10000) / 100}%`
                        tr.appendChild(populationPercentCell)

                        countryPopulationTableBody.appendChild(tr);
                    }
                }

                function updateStats(data) {
                    const statsTableBody = document.getElementById('stats-table')
                    let currPlayers = data.totalPlayers
                    for (const tier of data.divisionData) {
                        const tr = document.createElement("tr");
                        tr.style.color = colors[tier.tier.split(" ")[0]]

                        // Division Column
                        const divisionCell = document.createElement("th");
                        divisionCell.scope = "row";
                        divisionCell.innerHTML = tier.tier
                        tr.appendChild(divisionCell);

                        // Players Column
                        const playersCell = document.createElement("th");
                        playersCell.scope = "row";
                        playersCell.innerHTML = tier.count
                        tr.appendChild(playersCell);

                        // % of Players Column
                        const percentPlayersCell = document.createElement("th");
                        percentPlayersCell.scope = "row";
                        percentPlayersCell.innerHTML = `${Math.round((tier.count / data.totalPlayers) * 10000) / 100}%`
                        tr.appendChild(percentPlayersCell);

                        // Percentiles Column
                        const percentileCell = document.createElement("th");
                        percentileCell.scope = "row";
                        const right = Math.round((currPlayers / data.totalPlayers) * 10000) / 100
                        currPlayers -= tier.count
                        const left = Math.round((currPlayers / data.totalPlayers) * 10000) / 100
                        percentileCell.innerHTML = `${left}% - ${right}%`
                        tr.appendChild(percentileCell);

                        statsTableBody.appendChild(tr);
                    }
                    document.getElementById('total-players').innerHTML = data.totalPlayers
                    document.getElementById('total-mogis').innerHTML = data.totalMogis
                    document.getElementById('average-mmr').innerHTML = data.averageMmr
                    document.getElementById('median-mmr').innerHTML = data.medianMmr
                }    

                function updateStatsChart(data) {
                    const chart = new Chart(document.getElementById("statDivisionChartBody"), {
                        type: "bar",
                        data: {
                            labels: data.divisionData.map((row) => row.tier),
                            datasets: [
                                {
                                    label: "Players per Rank",
                                    data: data.divisionData.map((row) => row.count),
                                    backgroundColor: data.divisionData.map((row) => colors[row.tier.split(" ")[0]])
                                },
                            ],
                        },
                        options: {
                            plugins: {
                                title: {
                                    display: true,
                                    font: {
                                        size: 16
                                    },
                                    padding: 20,
                                    text: "Players per Rank"
                                },
                                legend: {
                                    display: false
                                }
                            }
                        }
                    });
                }

                function updatePage(data) {
                    updateStatsChart(data)
                    updateStats(data)
                    updatePopulationCountryChart(data)
                    updateOverallCountryChart(data)
                    updateTopCountryChart(data)
                    updateMogiFormatChart(data)
                    updateMogiActivityChart(data)
                    updateMogiTables(data) 
                }

                const url = `/api/player/stats?season=${season}`;
                fetch(url)
                    .then((response) => response.json())
                    .then((data) => updatePage(data))
                    .catch((error) => {
                        console.log(`Error fetching Stats`);
                    });
            </script>
    }